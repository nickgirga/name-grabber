#!/usr/bin/python
# name-grabber
# Version 3.2
# Nicholas Girga
# Released under GPL3 with ABSOLUTELY NO WARRANTY

# This program simply creates and/or updates a text file in the specified
# directory at a set interval of time with the name of a chosen window. This was
# intended to be used with OBS to update labels that show what music is playing
# in the web browser when all other methods fail.

### imports
import gi, os, sys, time, subprocess
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from threading import Thread
from os.path import expanduser
from gi.repository import GdkPixbuf

### define main class
class Main:
    # define consts
    DELAY_BAR_STEP = 500.0
    DEFAULT_FILE_DESTINATION = expanduser("~") + "/window-name.txt"
    LOCAL_GLADE_FILE_PATH = "./main.glade"
    SYSTEM_GLADE_FILE_PATH = "/usr/share/name-grabber/main.glade"
    LOCAL_SMALL_ICON_FILE_PATH = "./res/icon_16x16.png"
    SYSTEM_SMALL_ICON_FILE_PATH = "/usr/share/name-grabber/res/icon_16x16.png"
    LOCAL_LARGE_ICON_FILE_PATH = "./res/icon_128x128.png"
    SYSTEM_LARGE_ICON_FILE_PATH = "/usr/share/name-grabber/res/icon_128x128.png"
    
    # define vars
    desired_window = b'0'
    window_name = ""
    crop_start = 0
    crop_end = 0
    prefix = ""
    suffix = ""
    pretty_window_name = ""
    file_destination = DEFAULT_FILE_DESTINATION
    delay = 1.0
    main_loop_running = False
    main_loop_thread = Thread()

    # initialize glade file
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        if (os.path.isfile(self.LOCAL_GLADE_FILE_PATH)):
            self.gladefile = self.LOCAL_GLADE_FILE_PATH
        elif(os.path.isfile(self.SYSTEM_GLADE_FILE_PATH)):
            self.gladefile = self.SYSTEM_GLADE_FILE_PATH
        else:
            self.create_simple_message_dialog("ERR: no \"main.glade\" file found at \"" + self.SYSTEM_GLADE_FILE_PATH + "\" or at \"" + self.LOCAL_GLADE_FILE_PATH + "\" in the working directory", "Name Grabber - Error")
            sys.exit()
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        self.builder.connect_signals(self)
        self.window = self.builder.get_object("window0")
        if (os.path.isfile(self.LOCAL_SMALL_ICON_FILE_PATH)):
            self.window.set_icon_from_file(self.LOCAL_SMALL_ICON_FILE_PATH)
        elif (os.path.isfile(self.SYSTEM_SMALL_ICON_FILE_PATH)):
            self.window.set_icon_from_file(self.SYSTEM_SMALL_ICON_FILE_PATH)
        else:
            self.create_simple_message_dialog("ERR: No icon found at \"" + self.SYSTEM_SMALL_ICON_FILE_PATH + "\" or at \"" + self.LOCAL_SMALL_ICON_FILE_PATH + "\" in the working directory.","Name Grabber - Error")
            self.window.set_icon_name("window")
        self.window.present()
        
        self.builder.get_object("file_destination_textbox").set_property("text", self.file_destination)
    
    # select a window using xdotool
    def select_window(self) -> bytes:
        _desired_window = ""

        try:
            # try to call xdotool
            _desired_window = subprocess.check_output(["xdotool", "selectwindow"])
        except Exception as e:
            # return default if xdotool acts funny
            # self.create_simple_message_dialog(self.window, "ERR: xdotool could not retrieve the ID of the selected window!\n" + str(e))
            return ""
        return _desired_window
    
    # returns the name of the window that has been passed in
    def get_window_name(self, window: bytes) -> str:
        _window_name = ""

        try:
            # try to call xdotool
            _window_name = subprocess.check_output(["xdotool", "getwindowname", str(int(window))])
        except Exception as e:
            # set _window_name to default if xdotool acts funny
            print("ERR: xdotool could not retrieve the name of the window with the id \"" + str(int(window)) + "\"\n" + str(e))
            _window_name = ""

        try:
            # clip off the end-line (\n) from _window_name
            _window_name_sub = _window_name[:len(_window_name) - 1]
            # decode _window_name_sub from bytes to string and return it
            return _window_name_sub.decode("utf-8")
        except Exception as e:
            # report failure of decode
            print("ERR: failed to decode response from xdotool: \"" + str(_window_name) + "\"\n" + str(e))
            _window_name = ""
        
        self.builder.get_object("update_file_button").set_property("active", False)
        self.disable_settings()
        return _window_name
    
    # simple popup window
    def create_simple_message_dialog(self, text, title="Name Grabber", yesno=False, window=None):
        message = Gtk.MessageDialog(parent=window, flags=0, message_type=Gtk.MessageType.INFO, buttons=(Gtk.ButtonsType.YES_NO if yesno else Gtk.ButtonsType.OK), text=text)
        message.set_title(title)
        if (os.path.isfile(self.LOCAL_SMALL_ICON_FILE_PATH)):
            message.set_icon_from_file(self.LOCAL_SMALL_ICON_FILE_PATH)
        elif (os.path.isfile(self.SYSTEM_SMALL_ICON_FILE_PATH)):
            message.set_icon_from_file(self.SYSTEM_SMALL_ICON_FILE_PATH)
        else:
            print("ERR: No icon found at \"" + self.SYSTEM_SMALL_ICON_FILE_PATH + "\" or at \"" + self.LOCAL_SMALL_ICON_FILE_PATH + "\" in the working directory.")
            message.set_icon_name("window")
        response = message.run()
        message.destroy()
        return response
    
    # show save dialog and return the file destination
    def on_save(self, use_filter: bool, filter_name: str, filter_pattern: str) -> str:
        # create and setup dialog
        dialog = Gtk.FileChooserDialog(title="Please choose where to save file", parent=self.window, action=Gtk.FileChooserAction.SAVE)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_SAVE, Gtk.ResponseType.OK)
        dialog.set_property("do_overwrite_confirmation", True)
        if (use_filter):
            filter_obj = Gtk.FileFilter()
            filter_obj.set_name(filter_name)
            filter_obj.add_pattern(filter_pattern)
            dialog.add_filter(filter_obj)

        # show dialog
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            file_path = dialog.get_filename()
            dialog.destroy()
            return file_path
        dialog.destroy()
        return ""

    # show open dialog and return the desired file path
    def on_open(self, use_filter: bool, filter_name: str, filter_pattern: str) -> str:
        # create and setup dialog
        dialog = Gtk.FileChooserDialog(title="Please choose a file", parent=self.window, action=Gtk.FileChooserAction.OPEN)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)
        if (use_filter):
            filter_obj = Gtk.FileFilter()
            filter_obj.set_name(filter_name)
            filter_obj.add_pattern(filter_pattern)
            dialog.add_filter(filter_obj)

        # show dialog
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            file_path = dialog.get_filename()
            dialog.destroy()
            return file_path
        dialog.destroy()
        return ""
        
    # only to be called after a window is selected; allows user to edit settings
    def enable_settings(self):
        # get widgets
        settings_pane = self.builder.get_object("settings_pane")
        update_file_button = self.builder.get_object("update_file_button")
        open_preset_button = self.builder.get_object("open_preset_button")
        save_preset_button = self.builder.get_object("save_preset_button")
        
        # enable widgets
        settings_pane.set_property("sensitive", True)
        update_file_button.set_property("sensitive", True)
        open_preset_button.set_property("sensitive", True)
        save_preset_button.set_property("sensitive", True)
        
        # change tooltips
        settings_pane.set_tooltip_text("")
        update_file_button.set_tooltip_text("")
        open_preset_button.set_tooltip_text("")
        save_preset_button.set_tooltip_text("")
        
    # prevents user from editing settings
    def disable_settings(self):
        # get widgets
        settings_pane = self.builder.get_object("settings_pane")
        update_file_button = self.builder.get_object("update_file_button")
        open_preset_button = self.builder.get_object("open_preset_button")
        save_preset_button = self.builder.get_object("save_preset_button")
        
        # disable widgets
        settings_pane.set_property("sensitive", False)
        update_file_button.set_property("sensitive", False)
        open_preset_button.set_property("sensitive", False)
        save_preset_button.set_property("sensitive", False)
        
        # change tooltips
        settings_pane.set_tooltip_text("Select a window before changing settings")
        update_file_button.set_tooltip_text("Select a window before updating file")
        open_preset_button.set_tooltip_text("Select a window before opening a preset")
        save_preset_button.set_tooltip_text("Select a window before saving a preset")
        
        # update settings widgets
        self.builder.get_object("delay_value").set_property("value", 1.0)
        self.builder.get_object("crop_start_value").set_property("value", 0)
        self.builder.get_object("crop_end_value").set_property("value", 0)
        self.builder.get_object("prefix_textbox").set_property("text", "")
        self.builder.get_object("suffix_textbox").set_property("text", "")
        self.builder.get_object("file_destination_textbox").set_property("text", self.DEFAULT_FILE_DESTINATION)
        
        # verify settings are loaded into vars
        self.delay = 1.0
        self.crop_start = 0
        self.crop_end = 0
        self.prefix = ""
        self.suffix = ""
        self.file_destination = self.DEFAULT_FILE_DESTINATION
    
        # collapse settings_pane
        settings_pane.set_property("expanded", False)
    
    # makes sure that output_display has up-to-date information
    def update_display(self):
        # get settings
        self.window_name = self.get_window_name(self.desired_window)
        self.crop_start = int(self.builder.get_object("crop_start_value").get_property("value"))
        self.crop_end = int(self.builder.get_object("crop_end_value").get_property("value"))
        self.prefix = self.builder.get_object("prefix_textbox").get_property("text")
        self.suffix = self.builder.get_object("suffix_textbox").get_property("text")
        
        # change text in output_display based on settings
        self.pretty_window_name = self.prefix + self.window_name[self.crop_start:len(self.window_name) - self.crop_end] + self.suffix
        self.builder.get_object("output_display").set_property("text", self.pretty_window_name)
        
        # update window_name_textbox
        self.builder.get_object("window_name_textbox").set_property("text", self.window_name)
        
    # ensures you don't over crop by updating max values
    def update_max_crop_values(self):
        # get value objects
        crop_start_value_obj = self.builder.get_object("crop_start_value")
        crop_end_value_obj = self.builder.get_object("crop_end_value")
        
        # get current values
        crop_start_value = crop_start_value_obj.get_property("value")
        crop_end_value = crop_end_value_obj.get_property("value")
        
        # update max values
        crop_start_value_obj.set_property("upper", len(self.window_name) - crop_end_value - 1)
        crop_end_value_obj.set_property("upper", len(self.window_name) - crop_start_value - 1)
        
    # quit with cancel
    def on_window0_destroy(self, object, data=None):
        self.main_loop_running = False
        Gtk.main_quit()
       
    # called when the value of crop_start_value has changed
    def crop_start_value_changed(self, object, data=None):
        self.update_display()
        self.update_max_crop_values()
        
    # called when the value of crop_end_value has changed
    def crop_end_value_changed(self, object, data=None):
        self.update_display()
        self.update_max_crop_values()
        
    # called when the value of delay_value has changed    
    def delay_value_changed(self, object, data=None):
        self.delay = object.get_property("value")
        
    # called when the text in the prefix_textbox has changed
    def prefix_textbox_changed(self, object, data=None):
        self.update_display()
        
    # called when the text in the suffix_textbox has changed
    def suffix_textbox_changed(self, object, data=None):
        self.update_display()
        
    # called when update_file_button is toggled
    def update_file_button_toggled(self, object, data=None):
        delay_spin_button = self.builder.get_object("delay_spin_button")
        
        if (object.get_property("active")):
            delay_spin_button.set_property("sensitive", False)
            delay_spin_button.set_tooltip_text("You must stop updating the file in order to change the delay")
            self.main_loop_running = True
            main_loop_thread = Thread(target=self.main_loop)
            main_loop_thread.start()
        else:
            self.main_loop_running = False
            delay_spin_button.set_property("sensitive", True)
            delay_spin_button.set_tooltip_text("")
        
    # called when select_window_button is toggled
    def select_window_button_toggled(self, object, data=None):
        if (object.get_property("active")):
            _desired_window = self.select_window()
            if (_desired_window != ""):
                self.desired_window = _desired_window
                self.update_display()
                self.enable_settings()
                self.builder.get_object("crop_start_value").set_property("value", 0)
                self.builder.get_object("crop_end_value").set_property("value", 0)
            object.set_property("active", False)
    
    # called when save_preset_button is pressed
    def save_preset_button_clicked(self, object, data=None):
        preset_file_destination = self.on_save(True, "Name Grabber preset file (*.gura)", "*.gura")
        if (preset_file_destination != ""):
            try:
                # print preset to file
                file = open(preset_file_destination, "w")
                file.write(str(round(self.delay, 2)) + "\n")
                file.write(str(self.crop_start) + "\n")
                file.write(str(self.crop_end) + "\n")
                file.write(self.prefix + "\n")
                file.write(self.suffix + "\n")
                file.write(self.file_destination + "\n")
                file.close()
            except Exception as e:
                self.create_simple_message_dialog("ERR: failed to print preset to file.\n\n" + str(e), "Name Grabber - Error")
                sys.exit()
           
    # called when open_preset_button is pressed     
    def open_preset_button_clicked(self, object, data=None):
        preset_file = self.on_open(True, "Name Grabber preset file (*.gura)", "*.gura")
        
        # return if user cancelled
        if (preset_file == ""):
            return
        
        try:
            # open preset file
            file = open(preset_file, "r")
            lines = file.readlines()
            _delay = float(lines[0][:len(lines[0]) - 1])
            _crop_start = int(lines[1][:len(lines[1]) - 1])
            _crop_end = int(lines[2][:len(lines[2]) - 1])
            _prefix = lines[3][:len(lines[3]) - 1]
            _suffix = lines[4][:len(lines[4]) - 1]
            _file_destination = lines[5][:len(lines[5]) - 1]
        except Exception as e:
            self.create_simple_message_dialog("ERR: failed to open preset file.\n" + str(e), "Name Grabber - Error")
            sys.exit()
            
        # update settings widgets
        self.builder.get_object("delay_value").set_property("value", _delay)
        self.builder.get_object("crop_start_value").set_property("value", _crop_start)
        self.builder.get_object("crop_end_value").set_property("value", _crop_end)
        self.builder.get_object("prefix_textbox").set_property("text", _prefix)
        self.builder.get_object("suffix_textbox").set_property("text", _suffix)
        self.builder.get_object("file_destination_textbox").set_property("text", _file_destination)
        
        # verify settings are loaded into vars
        self.delay = _delay
        self.crop_start = _crop_start
        self.crop_end = _crop_end
        self.prefix = _prefix
        self.suffix = _suffix
        self.file_destination = _file_destination
        
        self.update_display()
    
    # called when about_button is pressed
    def about_button_clicked(self, object, data=None):
        about = Gtk.AboutDialog()
        about.set_program_name("Name Grabber")
        about.set_version("3.2")
        about.set_property("authors", ["Nicholas Girga"])
        about.set_comments("A tool to grab the name of a specified window at a set interval of time.")
        about.set_website("http://gitlab.com/nickgirga/name-grabber")
        about.set_website_label("gitlab.com/nickgirga/name-grabber")
        about.set_license_type(Gtk.License.GPL_3_0)
        pixbuf = GdkPixbuf.Pixbuf()
        if (os.path.isfile(self.LOCAL_LARGE_ICON_FILE_PATH)):
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(self.LOCAL_LARGE_ICON_FILE_PATH)
            about.set_logo(pixbuf)
        elif (os.path.isfile(self.SYSTEM_LARGE_ICON_FILE_PATH)):
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(self.SYSTEM_LARGE_ICON_FILE_PATH)
            about.set_logo(pixbuf)
        else:
            self.create_simple_message_dialog("ERR: No icon found at \"" + self.SYSTEM_LARGE_ICON_FILE_PATH + "\" or at \"" + self.LOCAL_LARGE_ICON_FILE_PATH + "\" in the working directory.", "Name Grabber - Error")
            about.set_logo_icon_name("window")
        if (os.path.isfile(self.LOCAL_SMALL_ICON_FILE_PATH)):
            about.set_icon_from_file(self.LOCAL_SMALL_ICON_FILE_PATH)
        elif (os.path.isfile(self.SYSTEM_SMALL_ICON_FILE_PATH)):
            about.set_icon_from_file(self.SYSTEM_SMALL_ICON_FILE_PATH)
        else:
            self.create_simple_message_dialog("ERR: No icon found at \"" + self.SYSTEM_SMALL_ICON_FILE_PATH + "\" or at \"" + self.LOCAL_SMALL_ICON_FILE_PATH + "\" in the working directory.","Name Grabber - Error")
            about.set_icon_name("window")
        
        about.run()
        about.destroy()
    
    # show save dialog for window-name.txt; cb for select file button    
    def file_destination_select_file_button_clicked(self, object, data=None):
        _file_destination = self.on_save(False, "", "")
        if (_file_destination != ""):
            self.file_destination = _file_destination
            self.builder.get_object("file_destination_textbox").set_property("text", self.file_destination)
        
    # called when file button in header bar is clicked; shows file popover
    def file_button_clicked(self, popover, data=None):
        popover.popup()
        
    # the main loop; responsible for updating window name information and printing it to a file
    def main_loop(self):
        delay_bar = self.builder.get_object("delay_bar")
        
        while (self.main_loop_running):
            self.update_display()
            
            try:
                # print window name to file
                file = open(self.file_destination, "w")
                file.write(self.pretty_window_name)
                file.close()
            except:
                self.create_simple_message_dialog("ERR: failed to print window name to file.", "Name Grabber - Error")
                sys.exit()
            
            self.delay = self.builder.get_object("delay_value").get_property("value")
            _micro_delay = self.delay / self.DELAY_BAR_STEP
            for i in range(0, int(self.DELAY_BAR_STEP)):
                time.sleep(_micro_delay)
                delay_bar.set_property("value", i / self.DELAY_BAR_STEP)
                if (not self.main_loop_running):
                    delay_bar.set_property("value", 0.0)
                    return
            delay_bar.set_property("value", 0.0)
        
### start
# create main instance
if __name__ == "__main__":
    main = Main()
    Gtk.main()
